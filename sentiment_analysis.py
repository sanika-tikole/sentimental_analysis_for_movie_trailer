# -*- coding: utf-8 -*-
"""Sentiment Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E5AeEu6F-S_x6sbyeVCur9mG_61nTH28
"""

#problem statement
"""
we have huge number of comments from youtube for latest trailer from a worldwide prodduction house you as an aip
service provider are supporsed to analyse all the comments on that trailer get the sentiment and the score and give a
consolidated report for that trailer about how it might perform on the box office
"""

"""
1. do all the necessary imports
2.create afunction for removing stop words
3.create a function to calculate the sentiment score and sentiment
4.loop through the comment that you will get from your input excel file
4.5 segrate word into positive and negative
5.calculate all the sentiments in loop and return only one final result
"""

!pip install torch

!pip install transformers

!pip install nltk

!pip install vaderSentiment

import nltk
nltk.download('vader_lexicon')
nltk.download('stopwords')
nltk.download('punkt_tab')

from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
from transformers import pipeline

sia = SentimentIntensityAnalyzer()
stop_words = set(stopwords.words("english"))
classifier = pipeline("sentiment-analysis", model="distilbert/distilbert-base-uncased-finetuned-sst-2-english")

import pandas as pd
df = pd.read_excel("/content/Datafile.xlsx")
Comment = df['Comment'].tolist()

def remove_stopwords(raw_comment):
    tokenized_comment = word_tokenize(raw_comment)
    processed_comment = [word for word in tokenized_comment if word.lower() not in stop_words]
    return ' '.join(processed_comment)

def get_comment_sentiment_details(raw_comment):
    processed_comment = remove_stopwords(raw_comment)
    words = processed_comment.split()
    positive_words = ""
    negative_words = ""
    sentence_score_temp = sia.polarity_scores(processed_comment)
    abs_sentence_score = abs(sentence_score_temp['compound'])
    sentiment_label = classifier(processed_comment)
    comment_sentiment = sentiment_label[0]["label"]

    if abs_sentence_score <= 0.1:  # Adjusted neutral threshold
        comment_sentiment = "NEUTRAL"
        sentence_score = 0
    elif comment_sentiment == "NEGATIVE":
        sentence_score = -abs_sentence_score
        for word in words:
            word_sentiment = sia.polarity_scores(word)
            if word_sentiment["compound"] < -0.1:  # Adjusted word sentiment threshold
                negative_words += word + " "
    elif comment_sentiment == "POSITIVE":
        sentence_score = abs_sentence_score
        for word in words:
            word_sentiment = sia.polarity_scores(word)
            if word_sentiment["compound"] > 0.1:  # Adjusted word sentiment threshold
                positive_words += word + " "
    else:
        sentence_score = 0

    return positive_words.strip(), negative_words.strip(), sentence_score, comment_sentiment

positive_words = ""
negative_words = ""
neu_count = 0

pos_values_list = []
neg_values_list = []

avg_pos_score = 0
avg_neg_score = 0

for comment in Comment:
    pw, nw, ss, cs = get_comment_sentiment_details(comment)
    positive_words += pw + " "
    negative_words += nw + " "
    if cs == "NEGATIVE":
        neg_values_list.append(ss)
    elif cs == "POSITIVE":
        pos_values_list.append(ss)
    else:
        neu_count += 1

try:
    avg_pos_score = sum(pos_values_list) / len(pos_values_list) if pos_values_list else 0
    avg_neg_score = sum(neg_values_list) / len(neg_values_list) if neg_values_list else 0

    total_scored_comments = len(pos_values_list) + len(neg_values_list)
    final_score = (avg_pos_score + avg_neg_score) / total_scored_comments if total_scored_comments > 0 else 0

except ZeroDivisionError:
    avg_pos_score = 0
    avg_neg_score = 0
    final_score = 0

print("Average Positive Score:", avg_pos_score)
print("Average Negative Score:", avg_neg_score)
print("Final Sentiment Score:", final_score)
print("Number of Neutral Comments:", neu_count)
print("All Positive Words:", positive_words)
print("All Negative Words:", negative_words)

from wordcloud import WordCloud
import matplotlib.pyplot as plt
print("negatives")
wordcloud_negative = WordCloud(width=800, height=400, background_color="white").generate(negative_words)
plt.figure(figsize=(10,5))
plt.imshow(wordcloud_negative)
plt.axis('off')
plt.show()

from wordcloud import WordCloud
import matplotlib.pyplot as plt
print("positive")
wordcloud_positive = WordCloud(width=800, height=400, background_color="white").generate(positive_words)
plt.figure(figsize=(10,5))
plt.imshow(wordcloud_positive)
plt.axis('off')
plt.show()